/// search type of CBU 4W and other

function myFunction() {
  var str = "The"; 
  var gabung = str.split(" ").join("")
  var res = gabung.search(/ain/gi);
  
  
  if (res > 0) {
 	 document.getElementById("demo").innerHTML = res;
     }
  else {
  	document.getElementById("demo").innerHTML = "There is no string you serching for";
  }
}

// To update/upsert a document inside MongoDB you can use the below-mentioned method, Mongoose now supports this natively with findOneAndUpdate (calls MongoDB //findAndModify).

//The upsert = true option creates the object if it doesn't exist. defaults to false.


    var query = {'username':req.user.username}; 

    req.newData.username = req.user.username; MyModel.findOneAndUpdate(query, req.newData, {upsert:true}, function(err, doc){ 

    if (err) return res.send(500, { error: err }); 

    return res.send("succesfully saved"); 

    });
    
    
    //continue statement
    var text = "";
    var i;
    for (i = 0; i < 5; i++) {
      if (i === 3) {
      continue;
      }
      text += "The number is " + i + "<br>";
    }



  
  
  for ( i=0; i>tblPibHdrUpload.length; i++){
    var newHdr = {
    CAR: req.body.CAR,
    KdKpbc: req.body.KdKpbc,
    PibNo: req.body.PibNo,
    PibTg: req.body.PibTg,
    JnPib: req.body.JnPib,
    JnImp: req.body.JnImp,
    JkWaktu: req.body.JkWaktu,
    CrByr: req.body.CrByr,
    DokTupKd: req.body.DokTupKd,
    DokTupNo: req.body.DokTupNo,
    DokTupTg: req.body.DokTupTg,
    PosNo: req.body.PosNo,
    PosSub: req.body.PosSub,
    PosSubSub: req.body.PosSubSub,
    ImpId: req.body.ImpId,
    ImpNpwp: req.body.ImpNpwp,
    ImpNama: req.body.ImpNama,
    ImpAlmt: req.body.ImpAlmt,
    ImpStatus: req.body.ImpStatus,
    ApiKd: req.body.ApiKd,
    ApiNo: req.body.ApiNo,
    PpjkId: req.body.PpjkId,
    PpjkNpwp: req.body.PpjkNpwp,
    PpjkNama: req.body.PpjkNama,
    PpjkAlmt: req.body.PpjkAlmt,
    PpjkNo: req.body.PpjkNo,
    PpjkTg: req.body.PpjkTg,
    IndId: req.body.IndId,
    IndNpwp: req.body.Npwp,
    IndNama: req.body.IndNama,
    IndAlmt: req.body.IndAlmt,
    PasokNama: req.body.PasokNama,
    PasokAlmt: req.body.PasokAlmt,
    PasokNeg: req.body.PasokNeg,
    PelBkr: req.body.PelBkr,
    PelMuat: req.body.PelMuat,
    PelTransit: req.body.PelTransit,
    TmpTbn: req.body.TmpTbn,
    Moda: req.body.Moda,
    AngkutNama: req.body.AngkutNama,
    AngkutNo: req.body.AngkutNo,
    AngkutFl: req.body.AngkutFl,
    TgTiba: TgTiba,
    KdVal: req.body.KdVal,
    Ndpbm: req.body.Ndpbm,
    NilInv: req.body.NillInv,
    Freight: req.body.Freight,
    BTambahan: req.body.BTambahan,
    Diskon: req.body.Diskon,
    KdAss: req.body.KdAss,
    Asuransi: req.body.Asuransi,
    KdHrg: req.body.KdHrg,
    Fob: req.body.Fob,
    Cif: req.body.Cif,
    Bruto: req.body.Bruto,
    Netto: req.body.Netto,
    JmCont: req.body.JmCont,
    JmBrg: req.body.JmBrg,
    Status: req.body.Status,
    Snrf: req.body.Snrf,
    KdFas: req.body.Kdfas,
    Lengkap: req.body.Lengkap,
    BillNpwp: req.body.BillNpwp,
    BillNama: req.body.BillNama,
    BillAlmt: req.body.BillAlmt,
    PenjualNama: req.body.PenjualNama,
    PenjualAlmt: req.body.PenjualAlmt,
    PenjualNeg: req.body.PenjualNeg,
    Pernyataan: req.body.Pernyataan,
    JnsTrans: req.body.JnsTrans,
    VD: req.body.VD,
    VersiModul: req.body.VersiModul,
    NilVd: NillVd,
    commodity: req.body.commodity,
    typeOfShipment: req.body.typeOfShipment,
    clearancePaymentStatus: req.body.clearancePaymentStatus || false,
    clearancePayments4W: req.body.clearancePayments4W || null,
    clearancePaymentsFCL: req.body.clearancePaymentsFCL || null,
    clearancePaymentsLCL: req.body.clearancePaymentsLCL|| null,
    clearancePaymentsAir: req.body.clearancePaymentsLCL || null,
    remmitanceStatus: req.body.remmitanceStatus || false,
    userHistory: req.body.userHistory || null
    }
  
    var query: {
      CAR: req.body.CAR
    }
    var newPib = tblPibHdr.findOneAndUpdate(query, newHdr, {upsert: true}, (err, HdrData)=>{
    if(!err){
      console.log(`data CAR ${HdrData.CAR} insert succesfull`)
      //call other function for loop other table update (temporary strategy using "tblPibHdrUpload[i].CAR == otherPibTableUpload[i].CAR")
    } else {
      console.log(`data CAR ${tblPibHdrUpload[i].CAR} Already Exist`)
      continue
    }
  }
  
  // Create commodity criteria with hs code filter
  
  - added CBU 4W HS code filter
    870120;8702;8703;8704;8705;
  - added CBU OBM HS code filter
    8407.21
  - added CBU 2W HS code filter
    8711
  - other (sparepart)
  
  //added function filter commodity trial
  
   function filterComodity(arraydetail){
      var hsCode = arraydetail.NoHs;
      var hsCode4 = hsCode.slice(0, 4)
      var hsCode6 = hsCode.slice(0, 6)
      if(hsCode6 == '870120' || hsCode4 == '8702' || hsCode4 == '8703' || hsCode4 == '8704' || hsCode4 == '8705'){
        return 'CBU 4W';
      } else if(hsCode6 == '840721'){
        return 'CBU OBM';
      } else if( hsCode4 == '8711'){
        return 'CBU 2W'
      } else {
        return 'Sparepart)
      }
   }
  


added filed commodity check boolean & compare with commodity detail (just take index[1].commodity with CAR reference


// just remember for countingdown tpt and other doc we can use counting down.
  
  <p id="demo"></p>

<script>
// Set the date we're counting down to
var countDownDate = new Date("Jan 5, 2021 15:37:25").getTime();

// Update the count down every 1 second
var x = setInterval(function() {

  // Get today's date and time
  var now = new Date().getTime();

  // Find the distance between now and the count down date
  var distance = countDownDate - now;

  // Time calculations for days, hours, minutes and seconds
  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

  // Display the result in the element with id="demo"
  document.getElementById("demo").innerHTML = days + "d " + hours + "h "
  + minutes + "m " + seconds + "s ";

  // If the count down is finished, write some text
  if (distance < 0) {
    clearInterval(x);
    document.getElementById("demo").innerHTML = "EXPIRED";
  }
}, 1000);
</script>



//for tpt please remember to considering stock by import and by sales
